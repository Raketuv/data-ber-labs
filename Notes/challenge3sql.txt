-- Challenge 1. Find number of inhabitants for district_id <10

SELECT * 
FROM client;

SELECT
	district_id,
	SUM(1) AS inhabitants
FROM client
WHERE district_id < 10
GROUP BY `district_id`
ORDER BY district_id ASC
LIMIT 10;

-- Challenge 2. From the `card` table, how many cards exist for each `type`? Rank the result starting with the most frequent `type`.

SELECT *
FROM card;

SELECT
	type,
	SUM(1) AS cards_per_type
FROM card
GROUP BY 1
ORDER BY 2 DESC;

-- Challenge 3. Using the `loan` table, print the top 10 `account_id`s based on the sum of all of their loan amounts.

SELECT *
FROM loan;

SELECT
	account_id,
	SUM(amount) AS total_loans
FROM `loan`
GROUP BY account_id
ORDER BY 2 DESC;


-- Challenge 4. From the `loan` table, retrieve the number of loans issued for each day, before (excl) 930907, ordered by date in descending order

SELECT * 
FROM loan;

SELECT 
	date,
	SUM(1) AS no_of_loans
FROM loan
WHERE date < 930907
GROUP BY 1
ORDER BY 1 DESC;


-- Challenge 5. From the `loan` table, for each day in December 1997, count the number of loans issued for each unique loan duration, ordered by date and duration, both in ascending order. You can ignore days without any loans in your output.


SELECT 
	date,
	DATE_FORMAT(date, '1997-12-%d') 	AS dateformatted
FROM loan
ORDER BY dateformatted;


SELECT 
	duration,
	SUM(1) AS number_of_loans,
	date
FROM loan
WHERE
	date >= '971201'
	AND date < '980101'
GROUP BY date, duration
ORDER BY date ASC, duration ASC;


-- Challenge 6. From the `trans` table, for account_id 396, sum the amount of transactions for each type (VYDAJ = Outgoing, PRIJEM = Incoming). Your output should have the account_id, the type and the sum of amount, named as `total_amount`. Sort alphabetically by type.

SELECT
	*
FROM
	trans;