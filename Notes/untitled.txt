
SELECT
	customer_id,
	order_purchase_timestamp
FROM
	olist.orders
LIMIT
	10;
	
	
-- sort dates from old to new

SELECT
	customer_id,
	order_id,
	order_purchase_timestamp,
	order_status
FROM olist.orders
ORDER BY order_purchase_timestamp DESC
LIMIT 100;


-- go into olist

USE olist;

SELECT
	customer_id,
	order_id,
	order_purchase_timestamp,
	order_status
FROM orders
ORDER BY order_purchase_timestamp DESC
LIMIT 100;


-- check the customers table

SELECT *
FROM olist.customers
LIMIT 1000;


SELECT
	customer_id,
	customer_state
FROM customers
ORDER BY 
	customer_state,
	customer_id
LIMIT 1000;


-- ALIASES

SELECT
	customer_id AS first_customer_id,
	customer_id AS second_customer_id,
	order_purchase_timestamp AS KINGS
FROM orders LEGENDS
ORDER BY KINGS
LIMIT 10;


--- FILTERING

SELECT
	order_id,
	customer_id,
	order_status,
	order_purchase_timestamp,
DATE(order_purchase_timestamp)
FROM orders
WHERE order_purchase_timestamp >= '2017-10-04'
AND order_purchase_timestamp < '2017-10-05'
ORDER BY order_purchase_timestamp;


-- Type conversion (casting)

SELECT
	CAST(order_purchase_timestamp AS DATE) AS order_purchase_date
from olist.orders;

-- CONCAT

SELECT
	seller_zip_code_prefix,
	seller_city,
	CAST(seller_zip_code_prefix AS CHAR),
	CONCAT(CAST(seller_zip_code_prefix AS CHAR), ' ', seller_city) AS address
FROM sellers
LIMIT 100;

-- IF statement with price category

SELECT
	product_id,
	order_id,
	seller_id,
	price,
	IF(price <= 150, 'cheap', 'expensive') AS price_category
FROM olist.order_items
LIMIT 1000;


SELECT
	product_id,
	order_id,
	seller_id,
	price,
	IF(price <= 150, 'cheap', IF(price <= 300, 'affordable', 'expensive')) AS price_category
FROM olist.order_items
LIMIT 1000;



-- IF as CASE

SELECT
	product_id,
	order_id,
	seller_id,
	price,
	IF(price <= 150, 'cheap', IF(price <= 300, 'affordable', 'expensive')) AS price_category,
	CASE
		WHEN price <= 150 THEN 'cheap'
		WHEN price <= 300 THEN 'affordable'
		ELSE 'expensive'
	END
FROM olist.order_items
ORDER BY 1, 2, 3
LIMIT 1000;


-- deduplicating

SELECT
	seller_id
FROM olist.order_items
GROUP BY 1
ORDER BY 1;


SELECT DISTINCT
	seller_id
FROM olist.order_items
ORDER BY 1;


SELECT DISTINCT
	seller_id,
	product_id
FROM olist.order_items
ORDER BY 1, 2;

